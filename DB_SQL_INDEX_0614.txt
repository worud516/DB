# 데이터베이스 a4가 존재하면 삭제
DROP DATABASE IF EXISTS a4;

# 데이터베이스 a4 생성
CREATE DATABASE a4;

# 데이터베이스 a4 선택
USE a4;

# 회원 테이블 생성, loginId, loginPw, `name`
## 조건 : loginId 칼럼에 UNIQUE INDEX 없이
CREATE TABLE `member`(
	loginId CHAR(100),
	loginPw CHAR(100),
	`name` CHAR(100)
);

# 회원 2명 생성
## 조건 : (loginId = 'user1', loginPw = 'user1', `name` = '홍길동')
## 조건 : (loginId = 'user2', loginPw = 'user2', `name` = '홍길순')
INSERT INTO `member` SET loginId = 'user1', loginPw = 'user1', `name` = '홍길동';
INSERT INTO `member` SET loginId = 'user2', loginPw = 'user2', `name` = '홍길순';

SELECT *
FROM `member`
WHERE loginId = 'user2';

# 회원 2배 증가 쿼리만들고 회원이 만명 넘을 때 까지 반복 실행
## 힌트1 : INSERT INTO `tableName` (col1, col2, col3, col4)
## 힌트2 : SELECT NOW(), UUID(), 'pw', '아무개'

#insert into `member`(
#	SELECT *
#	FROM `member`
	#WHERE loginId = 'user2'
#);

DELETE FROM `member`;


#고유값을 만들어줌
SELECT UUID(), 'pw', '아무개'
FROM `member`;

INSERT INTO `member` (
	SELECT UUID(), 'pw', '아무개'
	FROM `member`
);


# 회원수 확인
SELECT COUNT(*)
FROM `member`;


# 검색속도 확인
## 힌트 : SQL_NO_CACHE
SELECT SQL_NO_CACHE * FROM `member` WHERE loginId = 'user1';


# 유니크 인덱스를 loginID 칼럼에 걸기
## 설명 : mysql이 loginId의 고속검색을 위한 부가데이터를 자동으로 관리(생성/수정/삭제) 한다.
## 설명 : 이게 있고 없고가, 특정 상황에서 어마어마한 성능차이를 가져온다.
## 설명 : 생성된 인덱스의 이름은 기본적으로 칼럼명과 같다.
CREATE UNIQUE INDEX loginId_index ON `member`(loginId);

DESC `member`;


# 검색속도 확인, loginId 가 'user1' 인 회원 검색
SELECT * FROM `member` WHERE loginId = 'user1';

# 인덱스 삭제, `loginId` 이라는 이름의 인덱스 삭제
ALTER TABLE `member` DROP INDEX loginId_index;

# 회원 테이블 삭제
DROP TABLE `member`;


# 회원 테이블을 생성하는데, loginId에 uniqueIndex 까지 걸어주세요.
# unique or PRIMARY KEY 하면 자동으로 인덱스 생성
CREATE TABLE `member`(
	loginId CHAR(100) UNIQUE,
	loginPw CHAR(100),
	`name` CHAR(100)
);

DESC `member`;

# 회원 2명 생성
## 조건 : (loginId = 'user1', loginPw = 'user1', `name` = '홍길동')
## 조건 : (loginId = 'user2', loginPw = 'user2', `name` = '홍길순')

# 회원수 확인

# 인덱스 쓰는지 확인
## 힌트 : EXPLAIN SELECT SQL_NO_CACHE * ~
EXPLAIN SELECT * FROM `member`;
EXPLAIN SELECT loginId FROM `member`;